/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  StaticOracle,
  StaticOracleInterface,
} from "../../../../../src/plugins/oracle/implementations/StaticOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "parameters",
        type: "bytes",
      },
    ],
    name: "getClosePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "parameters",
        type: "bytes",
      },
    ],
    name: "getOpenPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610335806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639569eb8f1461003b578063f667ef9a1461006b575b600080fd5b61005560048036038101906100509190610158565b61009b565b60405161006291906101be565b60405180910390f35b61008560048036038101906100809190610158565b6100bd565b60405161009291906101be565b60405180910390f35b60008083838101906100ad91906102d2565b9050806000015191505092915050565b60008083838101906100cf91906102d2565b9050806000015191505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610118576101176100f3565b5b8235905067ffffffffffffffff811115610135576101346100f8565b5b602083019150836001820283011115610151576101506100fd565b5b9250929050565b6000806020838503121561016f5761016e6100e9565b5b600083013567ffffffffffffffff81111561018d5761018c6100ee565b5b61019985828601610102565b92509250509250929050565b6000819050919050565b6101b8816101a5565b82525050565b60006020820190506101d360008301846101af565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610227826101de565b810181811067ffffffffffffffff82111715610246576102456101ef565b5b80604052505050565b60006102596100df565b9050610265828261021e565b919050565b610273816101a5565b811461027e57600080fd5b50565b6000813590506102908161026a565b92915050565b6000602082840312156102ac576102ab6101d9565b5b6102b6602061024f565b905060006102c684828501610281565b60008301525092915050565b6000602082840312156102e8576102e76100e9565b5b60006102f684828501610296565b9150509291505056fea26469706673582212205460efdf8144e257e772ccc05b795552d92718b9472b10ece86fca5373bbb0fa64736f6c63430008130033";

type StaticOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StaticOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StaticOracle__factory extends ContractFactory {
  constructor(...args: StaticOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      StaticOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StaticOracle__factory {
    return super.connect(runner) as StaticOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StaticOracleInterface {
    return new Interface(_abi) as StaticOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StaticOracle {
    return new Contract(address, _abi, runner) as unknown as StaticOracle;
  }
}
