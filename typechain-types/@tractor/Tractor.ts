/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type BlueprintStruct = {
  publisher: AddressLike;
  data: BytesLike;
  maxNonce: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
};

export type BlueprintStructOutput = [
  publisher: string,
  data: string,
  maxNonce: bigint,
  startTime: bigint,
  endTime: bigint
] & {
  publisher: string;
  data: string;
  maxNonce: bigint;
  startTime: bigint;
  endTime: bigint;
};

export type SignedBlueprintStruct = {
  blueprint: BlueprintStruct;
  blueprintHash: BytesLike;
  signature: BytesLike;
};

export type SignedBlueprintStructOutput = [
  blueprint: BlueprintStructOutput,
  blueprintHash: string,
  signature: string
] & {
  blueprint: BlueprintStructOutput;
  blueprintHash: string;
  signature: string;
};

export interface TractorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLUEPRINT_TYPEHASH"
      | "destroyBlueprint"
      | "domainSeparator"
      | "getBlueprintHash"
      | "getChainId"
      | "isValidSignature"
      | "isValidSignatureNow"
      | "packDataField"
      | "publishBlueprint"
      | "unpackDataField"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DestroyedBlueprint"
      | "PublishedBlueprint"
      | "UsedBlueprint"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLUEPRINT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destroyBlueprint",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlueprintHash",
    values: [BlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignatureNow",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "packDataField",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishBlueprint",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackDataField",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLUEPRINT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyBlueprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlueprintHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignatureNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packDataField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishBlueprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpackDataField",
    data: BytesLike
  ): Result;
}

export namespace DestroyedBlueprintEvent {
  export type InputTuple = [blueprintHash: BytesLike];
  export type OutputTuple = [blueprintHash: string];
  export interface OutputObject {
    blueprintHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublishedBlueprintEvent {
  export type InputTuple = [signedBlueprint: SignedBlueprintStruct];
  export type OutputTuple = [signedBlueprint: SignedBlueprintStructOutput];
  export interface OutputObject {
    signedBlueprint: SignedBlueprintStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsedBlueprintEvent {
  export type InputTuple = [operator: AddressLike, blueprintHash: BytesLike];
  export type OutputTuple = [operator: string, blueprintHash: string];
  export interface OutputObject {
    operator: string;
    blueprintHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tractor extends BaseContract {
  connect(runner?: ContractRunner | null): Tractor;
  waitForDeployment(): Promise<this>;

  interface: TractorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLUEPRINT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  destroyBlueprint: TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  getBlueprintHash: TypedContractMethod<
    [blueprint: BlueprintStruct],
    [string],
    "view"
  >;

  getChainId: TypedContractMethod<[], [bigint], "view">;

  isValidSignature: TypedContractMethod<
    [blueprintHash: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;

  isValidSignatureNow: TypedContractMethod<
    [signer: AddressLike, hash: BytesLike, signature: BytesLike],
    [boolean],
    "view"
  >;

  packDataField: TypedContractMethod<
    [dataType: BytesLike, data: BytesLike],
    [string],
    "view"
  >;

  publishBlueprint: TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  unpackDataField: TypedContractMethod<
    [data: BytesLike],
    [[string, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLUEPRINT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "destroyBlueprint"
  ): TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBlueprintHash"
  ): TypedContractMethod<[blueprint: BlueprintStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [blueprintHash: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignatureNow"
  ): TypedContractMethod<
    [signer: AddressLike, hash: BytesLike, signature: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "packDataField"
  ): TypedContractMethod<
    [dataType: BytesLike, data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishBlueprint"
  ): TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpackDataField"
  ): TypedContractMethod<[data: BytesLike], [[string, string]], "view">;

  getEvent(
    key: "DestroyedBlueprint"
  ): TypedContractEvent<
    DestroyedBlueprintEvent.InputTuple,
    DestroyedBlueprintEvent.OutputTuple,
    DestroyedBlueprintEvent.OutputObject
  >;
  getEvent(
    key: "PublishedBlueprint"
  ): TypedContractEvent<
    PublishedBlueprintEvent.InputTuple,
    PublishedBlueprintEvent.OutputTuple,
    PublishedBlueprintEvent.OutputObject
  >;
  getEvent(
    key: "UsedBlueprint"
  ): TypedContractEvent<
    UsedBlueprintEvent.InputTuple,
    UsedBlueprintEvent.OutputTuple,
    UsedBlueprintEvent.OutputObject
  >;

  filters: {
    "DestroyedBlueprint(bytes32)": TypedContractEvent<
      DestroyedBlueprintEvent.InputTuple,
      DestroyedBlueprintEvent.OutputTuple,
      DestroyedBlueprintEvent.OutputObject
    >;
    DestroyedBlueprint: TypedContractEvent<
      DestroyedBlueprintEvent.InputTuple,
      DestroyedBlueprintEvent.OutputTuple,
      DestroyedBlueprintEvent.OutputObject
    >;

    "PublishedBlueprint(tuple)": TypedContractEvent<
      PublishedBlueprintEvent.InputTuple,
      PublishedBlueprintEvent.OutputTuple,
      PublishedBlueprintEvent.OutputObject
    >;
    PublishedBlueprint: TypedContractEvent<
      PublishedBlueprintEvent.InputTuple,
      PublishedBlueprintEvent.OutputTuple,
      PublishedBlueprintEvent.OutputObject
    >;

    "UsedBlueprint(address,bytes32)": TypedContractEvent<
      UsedBlueprintEvent.InputTuple,
      UsedBlueprintEvent.OutputTuple,
      UsedBlueprintEvent.OutputObject
    >;
    UsedBlueprint: TypedContractEvent<
      UsedBlueprintEvent.InputTuple,
      UsedBlueprintEvent.OutputTuple,
      UsedBlueprintEvent.OutputObject
    >;
  };
}
