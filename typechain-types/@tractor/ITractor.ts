/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type BlueprintStruct = {
  publisher: AddressLike;
  data: BytesLike;
  maxNonce: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
};

export type BlueprintStructOutput = [
  publisher: string,
  data: string,
  maxNonce: bigint,
  startTime: bigint,
  endTime: bigint
] & {
  publisher: string;
  data: string;
  maxNonce: bigint;
  startTime: bigint;
  endTime: bigint;
};

export type SignedBlueprintStruct = {
  blueprint: BlueprintStruct;
  blueprintHash: BytesLike;
  signature: BytesLike;
};

export type SignedBlueprintStructOutput = [
  blueprint: BlueprintStructOutput,
  blueprintHash: string,
  signature: string
] & {
  blueprint: BlueprintStructOutput;
  blueprintHash: string;
  signature: string;
};

export interface ITractorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "destroyBlueprint"
      | "domainSeparator"
      | "getBlueprintHash"
      | "isValidSignature"
      | "packDataField"
      | "publishBlueprint"
      | "unpackDataField"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "destroyBlueprint",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlueprintHash",
    values: [BlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "packDataField",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishBlueprint",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackDataField",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "destroyBlueprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlueprintHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packDataField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishBlueprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpackDataField",
    data: BytesLike
  ): Result;
}

export interface ITractor extends BaseContract {
  connect(runner?: ContractRunner | null): ITractor;
  waitForDeployment(): Promise<this>;

  interface: ITractorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  destroyBlueprint: TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  getBlueprintHash: TypedContractMethod<
    [blueprint: BlueprintStruct],
    [string],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [blueprintHash: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;

  packDataField: TypedContractMethod<
    [dataType: BytesLike, data: BytesLike],
    [string],
    "view"
  >;

  publishBlueprint: TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  unpackDataField: TypedContractMethod<
    [data: BytesLike],
    [[string, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "destroyBlueprint"
  ): TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBlueprintHash"
  ): TypedContractMethod<[blueprint: BlueprintStruct], [string], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [blueprintHash: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "packDataField"
  ): TypedContractMethod<
    [dataType: BytesLike, data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishBlueprint"
  ): TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpackDataField"
  ): TypedContractMethod<[data: BytesLike], [[string, string]], "view">;

  filters: {};
}
