/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBalance"
      | "getOwner"
      | "loadFromPosition"
      | "loadFromUser"
      | "unloadToPosition"
      | "unloadToUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "loadFromPosition",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loadFromUser",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unloadToPosition",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unloadToUser",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loadFromPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadFromUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unloadToPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unloadToUser",
    data: BytesLike
  ): Result;
}

export interface IAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IAccount;
  waitForDeployment(): Promise<this>;

  interface: IAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBalance: TypedContractMethod<
    [assetData: BytesLike, parameters: BytesLike],
    [bigint],
    "view"
  >;

  getOwner: TypedContractMethod<[parameters: BytesLike], [string], "view">;

  loadFromPosition: TypedContractMethod<
    [assetData: BytesLike, amount: BigNumberish, parameters: BytesLike],
    [void],
    "payable"
  >;

  loadFromUser: TypedContractMethod<
    [assetData: BytesLike, amount: BigNumberish, parameters: BytesLike],
    [void],
    "payable"
  >;

  unloadToPosition: TypedContractMethod<
    [
      position: AddressLike,
      assetData: BytesLike,
      amount: BigNumberish,
      parameters: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  unloadToUser: TypedContractMethod<
    [assetData: BytesLike, amount: BigNumberish, parameters: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [assetData: BytesLike, parameters: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[parameters: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "loadFromPosition"
  ): TypedContractMethod<
    [assetData: BytesLike, amount: BigNumberish, parameters: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "loadFromUser"
  ): TypedContractMethod<
    [assetData: BytesLike, amount: BigNumberish, parameters: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unloadToPosition"
  ): TypedContractMethod<
    [
      position: AddressLike,
      assetData: BytesLike,
      amount: BigNumberish,
      parameters: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unloadToUser"
  ): TypedContractMethod<
    [assetData: BytesLike, amount: BigNumberish, parameters: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
