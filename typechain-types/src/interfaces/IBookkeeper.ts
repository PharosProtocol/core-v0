/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BlueprintStruct = {
  publisher: AddressLike;
  data: BytesLike;
  maxNonce: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
};

export type BlueprintStructOutput = [
  publisher: string,
  data: string,
  maxNonce: bigint,
  startTime: bigint,
  endTime: bigint
] & {
  publisher: string;
  data: string;
  maxNonce: bigint;
  startTime: bigint;
  endTime: bigint;
};

export type SignedBlueprintStruct = {
  blueprint: BlueprintStruct;
  blueprintHash: BytesLike;
  signature: BytesLike;
};

export type SignedBlueprintStructOutput = [
  blueprint: BlueprintStructOutput,
  blueprintHash: string,
  signature: string
] & {
  blueprint: BlueprintStructOutput;
  blueprintHash: string;
  signature: string;
};

export type PluginReferenceStruct = {
  addr: AddressLike;
  parameters: BytesLike;
};

export type PluginReferenceStructOutput = [addr: string, parameters: string] & {
  addr: string;
  parameters: string;
};

export type BorrowerConfigStruct = {
  initCollateralRatio: BigNumberish;
  positionParameters: BytesLike;
};

export type BorrowerConfigStructOutput = [
  initCollateralRatio: bigint,
  positionParameters: string
] & { initCollateralRatio: bigint; positionParameters: string };

export type FillStruct = {
  account: PluginReferenceStruct;
  loanAmount: BigNumberish;
  takerIdx: BigNumberish;
  loanAssetIdx: BigNumberish;
  collAssetIdx: BigNumberish;
  factoryIdx: BigNumberish;
  isOfferFill: boolean;
  borrowerConfig: BorrowerConfigStruct;
};

export type FillStructOutput = [
  account: PluginReferenceStructOutput,
  loanAmount: bigint,
  takerIdx: bigint,
  loanAssetIdx: bigint,
  collAssetIdx: bigint,
  factoryIdx: bigint,
  isOfferFill: boolean,
  borrowerConfig: BorrowerConfigStructOutput
] & {
  account: PluginReferenceStructOutput;
  loanAmount: bigint;
  takerIdx: bigint;
  loanAssetIdx: bigint;
  collAssetIdx: bigint;
  factoryIdx: bigint;
  isOfferFill: boolean;
  borrowerConfig: BorrowerConfigStructOutput;
};

export type OrderStruct = {
  minLoanAmounts: BigNumberish[];
  loanAssets: BytesLike[];
  collAssets: BytesLike[];
  minCollateralRatio: BigNumberish[];
  fillers: AddressLike[];
  isLeverage: boolean;
  maxDuration: BigNumberish;
  account: PluginReferenceStruct;
  assessor: PluginReferenceStruct;
  liquidator: PluginReferenceStruct;
  loanOracles: PluginReferenceStruct[];
  collOracles: PluginReferenceStruct[];
  factories: AddressLike[];
  isOffer: boolean;
  borrowerConfig: BorrowerConfigStruct;
};

export type OrderStructOutput = [
  minLoanAmounts: bigint[],
  loanAssets: string[],
  collAssets: string[],
  minCollateralRatio: bigint[],
  fillers: string[],
  isLeverage: boolean,
  maxDuration: bigint,
  account: PluginReferenceStructOutput,
  assessor: PluginReferenceStructOutput,
  liquidator: PluginReferenceStructOutput,
  loanOracles: PluginReferenceStructOutput[],
  collOracles: PluginReferenceStructOutput[],
  factories: string[],
  isOffer: boolean,
  borrowerConfig: BorrowerConfigStructOutput
] & {
  minLoanAmounts: bigint[];
  loanAssets: string[];
  collAssets: string[];
  minCollateralRatio: bigint[];
  fillers: string[];
  isLeverage: boolean;
  maxDuration: bigint;
  account: PluginReferenceStructOutput;
  assessor: PluginReferenceStructOutput;
  liquidator: PluginReferenceStructOutput;
  loanOracles: PluginReferenceStructOutput[];
  collOracles: PluginReferenceStructOutput[];
  factories: string[];
  isOffer: boolean;
  borrowerConfig: BorrowerConfigStructOutput;
};

export interface IBookkeeperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closePosition"
      | "destroyBlueprint"
      | "domainSeparator"
      | "fillOrder"
      | "getBlueprintHash"
      | "isValidSignature"
      | "kick"
      | "packDataField"
      | "publishBlueprint"
      | "signPublishOrder"
      | "unpackDataField"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closePosition",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyBlueprint",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [FillStruct, SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlueprintHash",
    values: [BlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "packDataField",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishBlueprint",
    values: [SignedBlueprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "signPublishOrder",
    values: [OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackDataField",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyBlueprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlueprintHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packDataField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishBlueprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signPublishOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpackDataField",
    data: BytesLike
  ): Result;
}

export interface IBookkeeper extends BaseContract {
  connect(runner?: ContractRunner | null): IBookkeeper;
  waitForDeployment(): Promise<this>;

  interface: IBookkeeperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closePosition: TypedContractMethod<
    [agreementBlueprint: SignedBlueprintStruct],
    [void],
    "payable"
  >;

  destroyBlueprint: TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  fillOrder: TypedContractMethod<
    [fill: FillStruct, orderBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  getBlueprintHash: TypedContractMethod<
    [blueprint: BlueprintStruct],
    [string],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [blueprintHash: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;

  kick: TypedContractMethod<
    [agreementBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  packDataField: TypedContractMethod<
    [dataType: BytesLike, data: BytesLike],
    [string],
    "view"
  >;

  publishBlueprint: TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;

  signPublishOrder: TypedContractMethod<
    [order: OrderStruct, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpackDataField: TypedContractMethod<
    [data: BytesLike],
    [[string, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [agreementBlueprint: SignedBlueprintStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "destroyBlueprint"
  ): TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [fill: FillStruct, orderBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBlueprintHash"
  ): TypedContractMethod<[blueprint: BlueprintStruct], [string], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [blueprintHash: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "kick"
  ): TypedContractMethod<
    [agreementBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "packDataField"
  ): TypedContractMethod<
    [dataType: BytesLike, data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishBlueprint"
  ): TypedContractMethod<
    [signedBlueprint: SignedBlueprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signPublishOrder"
  ): TypedContractMethod<
    [order: OrderStruct, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpackDataField"
  ): TypedContractMethod<[data: BytesLike], [[string, string]], "view">;

  filters: {};
}
